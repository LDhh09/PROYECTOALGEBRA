
     import random
import os
import numpy as np

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def print_maze(maze, player_pos):
    for row_idx, row in enumerate(maze):
        for col_idx, cell in enumerate(row):
            if (row_idx, col_idx) == player_pos:
                print("P", end=" ")
            else:
                print(cell, end=" ")
        print()

def generate_maze(size, obstacles):
    maze = [[" "] * size for _ in range(size)]

    # Add walls around the maze
    for i in range(size):
        maze[i][0] = "|"
        maze[i][size - 1] = "|"
        maze[0][i] = "-"
        maze[size - 1][i] = "-"

    maze[1][0] = " "  # Entry
    maze[size - 2][size - 1] = "E"  # Exit

    for _ in range(obstacles):
        while True:
            row = random.randint(1, size - 2)
            col = random.randint(1, size - 2)
            if maze[row][col] == " ":
                maze[row][col] = "|"
                break

    additional_walls = size  # A moderate number of walls to create a maze-like structure
    for _ in range(additional_walls):
        row = random.randint(1, size - 2)
        col = random.randint(1, size - 2)
        if maze[row][col] == " ":
            maze[row][col] = "|"

    return maze

def generate_math_goals(maze, num_goals):
    size = len(maze)
    goals = []
    operations = ["matrix_add", "matrix_sub", "matrix_mul", "matrix_div"]
    for _ in range(num_goals):
        while True:
            row = random.randint(1, size - 2)
            col = random.randint(1, size - 2)
            if maze[row][col] == " ":
                operation = random.choice(operations)
                matrix1 = np.random.randint(1, 10, (2, 2))
                matrix2 = np.random.randint(1, 10, (2, 2))
                if operation == "matrix_add":
                    maze[row][col] = "A"
                elif operation == "matrix_sub":
                    maze[row][col] = "S"
                elif operation == "matrix_mul":
                    maze[row][col] = "M"
                elif operation == "matrix_div":
                    maze[row][col] = "D"
                goals.append((row, col, operation, matrix1, matrix2))
                break
    return goals

def move_player(key, player_pos, maze):
    row, col = player_pos
    new_row, new_col = row, col
    if key == "w" and row > 0 and maze[row-1][col] not in "|-":
        new_row -= 1
    elif key == "s" and row < len(maze) - 1 and maze[row+1][col] not in "|-":
        new_row += 1
    elif key == "a" and col > 0 and maze[row][col-1] not in "|-":
        new_col -= 1
    elif key == "d" and col < len(maze[0]) - 1 and maze[row][col+1] not in "|-":
        new_col += 1
    return (new_row, new_col)

def solve_math_goal(equation):
    matrix1 = equation[3]
    matrix2 = equation[4]
    if equation[2] == "matrix_add":
        result = matrix1 + matrix2
        print("Matrices:")
        print(matrix1)
        print("+")
        print(matrix2)
        while True:
            try:
                answer = np.array(eval(input("Introduce la matriz resultante (en formato de lista de listas): ")))
                break
            except:
                print("Por favor, introduce una matriz válida.")
        return np.array_equal(answer, result)
    elif equation[2] == "matrix_sub":
        result = matrix1 - matrix2
        print("Matrices:")
        print(matrix1)
        print("-")
        print(matrix2)
        while True:
            try:
                answer = np.array(eval(input("Introduce la matriz resultante (en formato de lista de listas): ")))
                break
            except:
                print("Por favor, introduce una matriz válida.")
        return np.array_equal(answer, result)
    elif equation[2] == "matrix_mul":
        result = np.dot(matrix1, matrix2)
        print("Matrices:")
        print(matrix1)
        print("*")
        print(matrix2)
        while True:
            try:
                answer = np.array(eval(input("Introduce la matriz resultante (en formato de lista de listas): ")))
                break
            except:
                print("Por favor, introduce una matriz válida.")
        return np.array_equal(answer, result)
    elif equation[2] == "matrix_div":
        try:
            result = np.dot(matrix1, np.linalg.inv(matrix2))
        except np.linalg.LinAlgError:
            print("La segunda matriz no es invertible. Intenta nuevamente.")
            return False
        print("Matrices:")
        print(matrix1)
        print("/")
        print(matrix2)
        while True:
            try:
                answer = np.array(eval(input("Introduce la matriz resultante (en formato de lista de listas): ")))
                break
            except:
                print("Por favor, introduce una matriz válida.")
        return np.array_equal(answer, result)

def main():
    size = 10  # Size of the maze
    obstacles = 6  # Number of obstacles
    num_goals = 5  # Number of math goals

    maze = generate_maze(size, obstacles)
    goals = generate_math_goals(maze, num_goals)

    player_pos = (1, 0)  # Starting position
    while True:
        clear_screen()
        print_maze(maze, player_pos)
        print("Usa las teclas 'w' (arriba), 's' (abajo), 'a' (izquierda), 'd' (derecha) para moverte. Presiona 'q' para salir.")
        key = input("Ingresa una tecla: ").lower()
        if key == "q":
            print("¡Adiós!")
            break
        new_pos = move_player(key.lower(), player_pos, maze)
        if new_pos != player_pos:
            player_pos = new_pos
            for goal in goals:
                row, col, operation, matrix1, matrix2 = goal
                if player_pos == (row, col):
                    if solve_math_goal(goal):
                        maze[row][col] = " "
                        goals.remove(goal)
                        break
                    else:
                        print("¡Incorrecto! Intenta de nuevo.")
                        input("Presiona cualquier tecla para continuar...")
                        break
        if player_pos == (size - 2, size - 1):
            clear_screen()
            print_maze(maze, player_pos)
            print("¡Felicidades! ¡Has llegado a la salida!")
            break

if _name_ == "_main_":
    main()
